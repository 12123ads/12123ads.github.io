<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>用Traffmonetizer让吃灰🐥变现</title>
    <link href="/2023/07/23/traffmonetizer/"/>
    <url>/2023/07/23/traffmonetizer/</url>
    
    <content type="html"><![CDATA[<h2 id="注册"><a href="#注册" class="headerlink" title="注册"></a>注册</h2><blockquote><p>建议走我的aff，注册就能得5$，<a href="https://traffmonetizer.com/?aff=1261255">点这里</a>。</p></blockquote><p><img src="https://img.xzh.gs/i/2023/07/24/64be2853db4ef.png" srcset="/img/loading.gif" lazyload alt="首页"><br>注册好之后，你的首页会显示一个<code>application token</code>，这里先保存下来，后面挂程序会用到。</p><h2 id="挂程序"><a href="#挂程序" class="headerlink" title="挂程序"></a>挂程序</h2><blockquote><p>本教程以Linux的Docker为例<br>首先，需要安装Docker</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | bash<br></code></pre></td></tr></table></figure><p>然后直接运行下面的命令，就能挂好程序了</p><blockquote><p>记得将下面<code>token</code>替换成之前保存的<code>application token</code></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">#x86_64</span><br>docker run -itd --name tm traffmonetizer/cli:latest start accept --token token<br><br><span class="hljs-comment">#arm64v8</span><br>docker run -itd --name tm traffmonetizer/cli:arm64v8 start accept --token token<br><br><span class="hljs-comment">#arm32v7</span><br>docker run -itd --name tm traffmonetizer/cli:arm32v7 start accept --token token<br></code></pre></td></tr></table></figure><h2 id="提现"><a href="#提现" class="headerlink" title="提现"></a>提现</h2><p><code>Traffmonetizer</code>的提现方式有<code>Payoneer</code>, <code>BTC</code>, <code>Webmoney</code>, <code>Skrill</code>, <code>Payeer</code>, <code>TRC20 USDT</code>。这里建议用USDT，最方便，只需要有一个交易所账户就行了，这里不再赘述。</p>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cloudflare官方CNAME接入教程</title>
    <link href="/2023/01/28/cloudflare-cname/"/>
    <url>/2023/01/28/cloudflare-cname/</url>
    
    <content type="html"><![CDATA[<blockquote><p>使用SaaS的办法接入CNAME，需要在CLoudflare有一个ns接入的域名，还需要一个在国内服务商解析的域名</p></blockquote><p>打开在Cloudflare解析的域名，转到<code>DNS</code>页面</p><p><img src="https://img.xzh.gs/i/2023/01/28/63d514845bf5c.png" srcset="/img/loading.gif" lazyload alt="DNS"></p><p>添加一个由Cloudflare代理流量，指向源服务器的记录</p><blockquote><p>这里的前缀用什么都可以，这里我用的@</p></blockquote><p><img src="https://img.xzh.gs/i/2023/01/28/63d516ec52fdf.png" srcset="/img/loading.gif" lazyload alt="添加记录"></p><p>添加解析完成后，转到<code>SSL/TLS</code>的<code>自定义主机名</code>页面</p><p><img src="https://img.xzh.gs/i/2023/01/28/63d5185730746.png" srcset="/img/loading.gif" lazyload alt="自定义主机名"></p><p>在回退源这个地方填入刚刚解析源服务器的域名，填完点击添加回退源，等一会刷新一下就显示有效了</p><p><img src="https://img.xzh.gs/i/2023/01/28/63d51990020c2.png" srcset="/img/loading.gif" lazyload alt="设置回退源"></p><p>回退源显示有效了就可以添加<code>自定义主机名</code>了。<br>点击<code>添加自定义主机名</code>，将你需要套Cloudflare CDN的域名填入，剩下三保持不变(如果有需求可以自己选)，再次点击<code>添加自定义主机名</code>即可</p><p><img src="https://img.xzh.gs/i/2023/01/28/63d51b311b67c.png" srcset="/img/loading.gif" lazyload alt="添加自定义主机名"></p><p>添加好之后，还需要在需要套CDN的域名上解析两条TXT记录</p><p><img src="https://img.xzh.gs/i/2023/01/28/63d521e59dd15.png" srcset="/img/loading.gif" lazyload alt="添加TXT解析"></p><p>然后，在对应的域名上添加上Cloudflare的IP或cname解析可使用Cloudflare的CDN</p>]]></content>
    
    
    
    <tags>
      
      <tag>cloudflare</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>用Docker搭建Misskey去中心化社交平台</title>
    <link href="/2023/01/09/docker-misskey/"/>
    <url>/2023/01/09/docker-misskey/</url>
    
    <content type="html"><![CDATA[<p><img src="https://img.xzh.gs/i/2023/01/09/63bc345056db0.png" srcset="/img/loading.gif" lazyload></p><h2 id="安装Docker"><a href="#安装Docker" class="headerlink" title="安装Docker"></a>安装Docker</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl -fsSL https://get.docker.com | bash<br></code></pre></td></tr></table></figure><p><em>由于新版docker自带compose，所以不用单独安装。</em></p><h2 id="克隆项目"><a href="#克隆项目" class="headerlink" title="克隆项目"></a>克隆项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /opt<br>git <span class="hljs-built_in">clone</span> -b master https://github.com/misskey-dev/misskey.git<br><span class="hljs-built_in">cd</span> misskey<br>git checkout master<br></code></pre></td></tr></table></figure><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p><em>首先复制一份</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cp</span> .config/example.yml .config/default.yml<br><span class="hljs-built_in">cp</span> .config/docker_example.env .config/docker.env<br></code></pre></td></tr></table></figure><h3 id="编辑default-yml"><a href="#编辑default-yml" class="headerlink" title="编辑default.yml"></a>编辑default.yml</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .config/default.yml<br></code></pre></td></tr></table></figure><p>其中<code>url: https://example.tld/</code>改为你的实例域名<br><strong>db</strong>的<code>host</code>改为<code>docker-compose.yml</code>里的services名，<code>db</code>，<code>user</code>，<code>pass</code>分别改为你的数据库名，用户，密码。<br><strong>redis</strong>的<code>host</code>改为<code>docker-compose.yml</code>里的services名。</p><h3 id="编辑docker-env"><a href="#编辑docker-env" class="headerlink" title="编辑docker.env"></a>编辑docker.env</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim .config/docker.env<br></code></pre></td></tr></table></figure><p>这里的配置和<code>default.yml</code>保持一致</p><h2 id="构建镜像和初始化"><a href="#构建镜像和初始化" class="headerlink" title="构建镜像和初始化"></a>构建镜像和初始化</h2><blockquote><p>如果内存太小，建议直接选择已构建好的<a href="https://hub.docker.com/r/misskey/misskey">镜像</a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose build<br>docker compose run --<span class="hljs-built_in">rm</span> web pnpm run init<br></code></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">docker compose up -d<br></code></pre></td></tr></table></figure><h2 id="配置Nginx反向代理"><a href="#配置Nginx反向代理" class="headerlink" title="配置Nginx反向代理"></a>配置Nginx反向代理</h2><p><strong><a href="https://misskey-hub.net/en/docs/admin/nginx.html">Misskey文档</a>给了一份配置文件，根据自己需求改改</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># For WebSocket</span><br><span class="hljs-attribute">map</span> <span class="hljs-variable">$http_upgrade</span> <span class="hljs-variable">$connection_upgrade</span> &#123;<br>    <span class="hljs-attribute">default</span> upgrade;<br>    &#x27;&#x27;      close;<br>&#125;<br><br><span class="hljs-attribute">proxy_cache_path</span> /tmp/nginx_cache levels=<span class="hljs-number">1</span>:<span class="hljs-number">2</span> keys_zone=cache1:<span class="hljs-number">16m</span> max_size=<span class="hljs-number">1g</span> inactive=<span class="hljs-number">720m</span> use_temp_path=<span class="hljs-literal">off</span>;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> example.tld;<br><br>    <span class="hljs-comment"># For SSL domain validation</span><br>    <span class="hljs-attribute">root</span> /var/www/html;<br>    <span class="hljs-section">location</span> /.well-known/acme-challenge/ &#123; <span class="hljs-attribute">allow</span> all; &#125;<br>    <span class="hljs-section">location</span> /.well-known/pki-validation/ &#123; <span class="hljs-attribute">allow</span> all; &#125;<br>    <span class="hljs-section">location</span> / &#123; <span class="hljs-attribute">return</span> <span class="hljs-number">301</span> https://<span class="hljs-variable">$server_name</span><span class="hljs-variable">$request_uri</span>; &#125;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">listen</span> [::]:<span class="hljs-number">443</span> ssl http2;<br>    <span class="hljs-attribute">server_name</span> example.tld;<br><br>    <span class="hljs-attribute">ssl_session_timeout</span> <span class="hljs-number">1d</span>;<br>    <span class="hljs-attribute">ssl_session_cache</span> shared:ssl_session_cache:<span class="hljs-number">10m</span>;<br>    <span class="hljs-attribute">ssl_session_tickets</span> <span class="hljs-literal">off</span>;<br><br>    <span class="hljs-comment"># To use Let&#x27;s Encrypt certificate</span><br>    <span class="hljs-attribute">ssl_certificate</span>     /etc/letsencrypt/live/example.tld/fullchain.pem;<br>    <span class="hljs-attribute">ssl_certificate_key</span> /etc/letsencrypt/live/example.tld/privkey.pem;<br><br>    <span class="hljs-comment"># To use Debian/Ubuntu&#x27;s self-signed certificate (For testing or before issuing a certificate)</span><br>    <span class="hljs-comment">#ssl_certificate     /etc/ssl/certs/ssl-cert-snakeoil.pem;</span><br>    <span class="hljs-comment">#ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;</span><br><br>    <span class="hljs-comment"># SSL protocol settings</span><br>    <span class="hljs-attribute">ssl_protocols</span> TLSv1.<span class="hljs-number">2</span> TLSv1.<span class="hljs-number">3</span>;<br>    <span class="hljs-attribute">ssl_ciphers</span> ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;<br>    <span class="hljs-attribute">ssl_prefer_server_ciphers</span> <span class="hljs-literal">off</span>;<br>    <span class="hljs-attribute">ssl_stapling</span> <span class="hljs-literal">on</span>;<br>    <span class="hljs-attribute">ssl_stapling_verify</span> <span class="hljs-literal">on</span>;<br><br>    <span class="hljs-comment"># Change to your upload limit</span><br>    <span class="hljs-attribute">client_max_body_size</span> <span class="hljs-number">80m</span>;<br><br>    <span class="hljs-comment"># Proxy to Node</span><br>    <span class="hljs-section">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://127.0.0.1:3000;<br>        <span class="hljs-attribute">proxy_set_header</span> Host <span class="hljs-variable">$host</span>;<br>        <span class="hljs-attribute">proxy_http_version</span> <span class="hljs-number">1</span>.<span class="hljs-number">1</span>;<br>        <span class="hljs-attribute">proxy_redirect</span> <span class="hljs-literal">off</span>;<br><br>        <span class="hljs-comment"># If it&#x27;s behind another reverse proxy or CDN, remove the following.</span><br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP <span class="hljs-variable">$remote_addr</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For <span class="hljs-variable">$proxy_add_x_forwarded_for</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-Proto https;<br><br>        <span class="hljs-comment"># For WebSocket</span><br>        <span class="hljs-attribute">proxy_set_header</span> Upgrade <span class="hljs-variable">$http_upgrade</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-variable">$connection_upgrade</span>;<br><br>        <span class="hljs-comment"># Cache settings</span><br>        <span class="hljs-attribute">proxy_cache</span> cache1;<br>        <span class="hljs-attribute">proxy_cache_lock</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">proxy_cache_use_stale</span> updating;<br>        <span class="hljs-attribute">proxy_force_ranges</span> <span class="hljs-literal">on</span>;<br>        <span class="hljs-attribute">add_header</span> X-Cache <span class="hljs-variable">$upstream_cache_status</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实例套了CDN，需要删掉55-58行</p></blockquote><h2 id="升级实例"><a href="#升级实例" class="headerlink" title="升级实例"></a>升级实例</h2><p>在实例目录执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git stash<br>git checkout master<br>git pull<br>git submodule update --init<br>git stash pop<br>sudo docker compose build<br>sudo docker compose stop &amp;&amp; sudo docker compose up -d<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>misskey</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML学习笔记</title>
    <link href="/2022/09/03/learn-html/"/>
    <url>/2022/09/03/learn-html/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是站点？"><a href="#什么是站点？" class="headerlink" title="什么是站点？"></a>什么是站点？</h1><p>站点是WEB中所有文件和资源的集合<br>指属于某个WEB站点的文档的本地（计算机）或者远程存储（服务器）位置。</p><ul><li>网站是一个整体，网页是一个个的个体，一个网站是由很多网页构建而成。</li><li>网站和网页的关系就像家庭和家人一样。</li><li>网页与网站的区别简单来说：网站是由网页集合而成的，网页是由许多html文件集合而成的。</li><li>即使只有一个网页也能被称为网站。</li></ul><h1 id="HTML使用CSS的方式："><a href="#HTML使用CSS的方式：" class="headerlink" title="HTML使用CSS的方式："></a>HTML使用CSS的方式：</h1><h2 id="内联式："><a href="#内联式：" class="headerlink" title="内联式："></a>内联式：</h2><ul><li>内联式<code>css</code>样式表就是把<code>css</code>代码直接写在现有的HTML标签中。</li></ul><h2 id="嵌入式："><a href="#嵌入式：" class="headerlink" title="嵌入式："></a>嵌入式：</h2><ul><li>就是可以把<code>css</code>样式代码写在<code>&lt;style type=&quot;text/css&quot;&gt;&lt;/style&gt;</code>标签之间。</li></ul><h2 id="外部式："><a href="#外部式：" class="headerlink" title="外部式："></a>外部式：</h2><ul><li>就是把<code>css</code>代码写在一个单独的外部文件中，这个<code>css</code>样式以<code>.css</code>为扩展名，在<code>&lt;head&gt;</code>内（不是在<code>&lt;style&gt;</code>标签内）使用<code>&lt;link&gt;</code>标签将<code>css</code>样式链接到html文件内。</li></ul><h1 id="样式表方法区别："><a href="#样式表方法区别：" class="headerlink" title="样式表方法区别："></a>样式表方法区别：</h1><ol><li>外部样式表：<br>当样式需要应用于很多页面时，外部样式表将是理想的选择。在使用外部样式表的情况下，你可以通过改变一个文件来改变整个站点的外观。每个页面使用<code>&lt;link&gt;</code>标签链接到样式表</li><li>内部样式表：<br>当单个文档需要特殊样式时，就应该使用内部样式表，你可以使用<code>&lt;style&gt;</code>标签在文档头部定义内部样式表</li><li>内联样式式：<br>由于要将表现的内容混杂在一起，内联样式会损失掉样式表的许多优势。请慎用这种方法，例如当样式仅需要在一个元素上应用一次时</li></ol><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="内联式"><a href="#内联式" class="headerlink" title="内联式"></a>内联式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red; font-size: 12px; font-weight: bold&quot;</span>&gt;</span>内联式，红色，12px，粗体<span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="嵌入式"><a href="#嵌入式" class="headerlink" title="嵌入式"></a>嵌入式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">            <span class="hljs-selector-class">.p</span>&#123;<span class="hljs-attribute">color</span>: blue;</span><br><span class="language-css">               <span class="hljs-attribute">font-size</span>: <span class="hljs-number">24px</span>;</span><br><span class="language-css">               <span class="hljs-attribute">font-weight</span>: bolder&#125;</span><br><span class="language-css">        </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span>嵌入式，蓝色，24px，更粗的粗体<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="外部式"><a href="#外部式" class="headerlink" title="外部式"></a>外部式</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;waibu.css&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;p&quot;</span>&gt;</span>外部式，绿色，3em，细体<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-class">.p</span>&#123;<br>    <span class="hljs-attribute">color</span>: green;<br>    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3em</span>;<br>    <span class="hljs-attribute">font-weight</span>: lighter;<br>&#125;<br></code></pre></td></tr></table></figure><div class="note note-warning">            <p>三种CSS方法优先级：内联式&gt;内嵌式&gt;外部式</p>          </div><div class="note note-info">            <p>16进制颜色，格式为aabbcc，可以简写为abc；白是#ffffff，简写为#fff；黑是#000000，简写为#000。</p>          </div><p class="note note-primary">字体大小：1em=16px。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>html</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用docker快速搭建bitwarden个人密码管理器</title>
    <link href="/2022/08/14/docker-bitwarden/"/>
    <url>/2022/08/14/docker-bitwarden/</url>
    
    <content type="html"><![CDATA[<h1 id="安装所需环境"><a href="#安装所需环境" class="headerlink" title="安装所需环境"></a>安装所需环境</h1><h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><p><em>如果没有安装docker可以执行以下命令安装</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -fsSL https://get.docker.com | bash<br></code></pre></td></tr></table></figure><p><del>## 安装docker-compose</del></p><blockquote><p>由于最新版docker已自带compose，所以不需要再单独安装</p></blockquote><h1 id="运行docker容器"><a href="#运行docker容器" class="headerlink" title="运行docker容器"></a>运行docker容器</h1><p>在你想要的位置新建一个文件夹，里面会存放bitwarden的配置文件和数据库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir bitwarden &amp;&amp; cd bitwarden<br></code></pre></td></tr></table></figure><p>写入docker-compose配置文件</p><figure class="highlight docker"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs docker">cat &gt;&gt; docker-compose.yml &lt;&lt;EOF<br>version: <span class="hljs-string">&#x27;3&#x27;</span><br><br>services:<br>  bitwarden:<br>    image: vaultwarden/server:latest <span class="hljs-comment">#使用 vaultwarden/server 最新镜像</span><br>    container_name: bitwarden<br>    restart: always<br>    volumes:<br>      - ./data:/data  <span class="hljs-comment">#容器内的 /data 目录挂载到宿主机的当前目录下的 data 目录；</span><br>    env_file:<br>      - config.<span class="hljs-keyword">env</span><br>    ports:<br>      - <span class="hljs-string">&quot;18080:80&quot;</span> <span class="hljs-comment">#将容器内的 80 端口映射到了宿主机的 18080 端口</span><br>EOF<br></code></pre></td></tr></table></figure><h2 id="写入环境变量文件"><a href="#写入环境变量文件" class="headerlink" title="写入环境变量文件"></a>写入环境变量文件</h2><p><em>注意改成自己的配置</em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs env">cat &gt;&gt; config.env &lt;&lt;EOF<br>SIGNUPS_ALLOWED=true<br>DOMAIN=https://<br>ROCKET_WORKERS=10<br>WEB_VAULT_ENABLED=true<br>ADMIN_TOKEN=***<br>EOF<br></code></pre></td></tr></table></figure><h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><p><code>docker-compose up -d</code></p><h1 id="设置bitwarden"><a href="#设置bitwarden" class="headerlink" title="设置bitwarden"></a>设置bitwarden</h1><p><em><strong>因为安全原因，bitwarden必须要https链接，可以在<a href="https://www.digitalocean.com/community/tools/nginx?global.app.lang=zhCN">DigitalOcean</a>的这个网站生成NGINX的HTTPS反代配置，或者自行查阅<a href="https://www.google.com/">Google</a>在这里不做赘述</strong></em></p><p>浏览器输入<code>https://ip:port/</code>回车来访问搭建好的bitwarden，此时还要再做几个设置。</p><ol><li>先创建你的账号</li><li>回到环境变量文件，也就是<code>config.env</code>文件，把里面的SIGNUPS_ALLOWED<em>也就是允许注册</em>改为<code>false</code></li><li><em>建议</em>，将<code>WEB_VAULT_ENABLED</code>改为<code>false</code><em>把bitwarden的web面板关闭</em></li><li>使用<code>docker-compose down &amp;&amp; docker-compose up -d</code>重启容器</li></ol><h1 id="完成！"><a href="#完成！" class="headerlink" title="完成！"></a>完成！</h1>]]></content>
    
    
    <categories>
      
      <category>Docker</category>
      
    </categories>
    
    
    <tags>
      
      <tag>docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux下使用Hexo在GitHub Pages搭建博客</title>
    <link href="/2022/04/07/hexo-github_pages/"/>
    <url>/2022/04/07/hexo-github_pages/</url>
    
    <content type="html"><![CDATA[<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><p>配置搭建<code>Hexo</code>所需要的本地环境，包括<code>Git</code>、<code>Node.js</code>和<code>Hexo</code>本身。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>需要Git把本地博客提交到GitHub上，如果已经安装了Git，可以跳过这一步。<br><strong>Debian</strong>系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update &amp;&amp; sudo apt-get install -y git<br></code></pre></td></tr></table></figure><p><strong>RedHat</strong>系：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo yum update &amp;&amp; sudo yum install -y git<br></code></pre></td></tr></table></figure><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>因为Hexo是基于Nodejs的，所以要先安装Nodejs。<br>Linux安装命令：</p><blockquote><p>这里的命令安装的是16版本。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> /opt<br>wget https://nodejs.org/dist/v16.14.2/node-v16.14.2-linux-x64.tar.xz<br>tar -xvJf node-v16.14.2-linux-x64.tar.xz<br><span class="hljs-built_in">mv</span> node-v16.14.2-linux-x64 /opt/node<br><span class="hljs-built_in">rm</span> -rf node-v16.14.2-linux-x64<br><span class="hljs-built_in">ln</span> -s /opt/node/bin/node /usr/local/bin/<br><span class="hljs-built_in">ln</span> -s /opt/node/bin/npm /usr/local/bin/<br><span class="hljs-built_in">ln</span> -s /opt/node/bin/npx /usr/local/bin/<br></code></pre></td></tr></table></figure><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>这里使用npm安装Hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm install -g hexo-cli<br></code></pre></td></tr></table></figure><h1 id="配置博客"><a href="#配置博客" class="headerlink" title="配置博客"></a>配置博客</h1><h2 id="初始化博客"><a href="#初始化博客" class="headerlink" title="初始化博客"></a>初始化博客</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init blog<br><span class="hljs-built_in">cd</span> blog<br>npm install<br></code></pre></td></tr></table></figure><p>这里的blog用来存放博客文件<br>执行完成之后运行<code>hexo server</code>，访问<a href="http://IP:4000就能看见你的博客了。">http://IP:4000就能看见你的博客了。</a></p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>创建完成后，目录结构如下<br>blog&#x2F;<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br>|   ├── _drafts<br>|   └── _posts<br>└── themes</p><p>网站的配置文件是<code>_config.yml</code>，你可以在里面设置网站的大部分信息。<br>主要的配置项：</p><table><thead><tr><th align="center">参数</th><th align="left">描述</th></tr></thead><tbody><tr><td align="center">title</td><td align="left">网站标题</td></tr><tr><td align="center">subtitle</td><td align="left">网站副标题</td></tr><tr><td align="center">author</td><td align="left">网站作者</td></tr><tr><td align="center">url</td><td align="left">网址，必须用http&#x2F;https开头</td></tr><tr><td align="center">permalink</td><td align="left"><a href="https://hexo.io/zh-cn/docs/permalinks">具体参考这里</a></td></tr></tbody></table><p>其他的配置项也可以参考<a href="https://hexo.io/zh-cn/docs/configuration">这里</a></p><h2 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h2><p>使用<code>hexo new &#39;Hello world&#39;</code>可以在<em>sources&#x2F;_posts</em>生成一个Hello-world.md的文件，在这个文件里就能写文章了。</p><h1 id="上传博客到GitHub-pages"><a href="#上传博客到GitHub-pages" class="headerlink" title="上传博客到GitHub pages"></a>上传博客到GitHub pages</h1><h2 id="连接GitHub"><a href="#连接GitHub" class="headerlink" title="连接GitHub"></a>连接GitHub</h2><blockquote><p><strong>以下的username均改成你的GitHub用户名</strong></p></blockquote><ol><li>执行<code>ssh-keygen –t rsa</code>生成秘钥</li><li>使用<code>cat ~/.ssh/id_rsa.pub</code>拿到公钥</li><li>复制上一步拿到的公钥，并在<a href="https://github.com/settings/keys">Github</a>提交你的公钥</li><li>在<a href="%5BTitle%5D(https://github.com/new)">Github</a>创建一个名为<code>username.github.io</code>的仓库</li><li>在blog目录输入</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git remote add origin git@github.com:username/username.github.io.git<br></code></pre></td></tr></table></figure><ol start="6"><li>再输入<code>npm install hexo-deployer-git --save</code>安装<a href="https://github.com/hexojs/hexo-deployer-git">hexo-deployer-git</a></li><li>修改配置文件_config.yml，在底部追加以下内容</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs config">deploy:<br>  type: git<br>  repo: git@github.com:username/username.github.io.git<br>  branch: gh_pages<br></code></pre></td></tr></table></figure><ol start="8"><li>执行 <code>执行 hexo clean &amp;&amp; hexo d -g</code>即可生成网站文件并自动推送到github</li><li>打开<code>username.github.io</code>仓库的settings，转到Pages项，将Branch设置为<code>gh_pages</code>，保存。</li><li>此时浏览器打开<code>https://username.github.io</code>即可访问你的博客！</li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
      <tag>github</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello world</title>
    <link href="/2022/04/06/hello-world/"/>
    <url>/2022/04/06/hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="Hello-world"><a href="#Hello-world" class="headerlink" title="Hello world"></a>Hello world</h1>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
